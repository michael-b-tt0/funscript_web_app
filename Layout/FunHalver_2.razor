@inject ILogger<FunHalver_2> Logger
<h3>FunHalver_2</h3>

<p>Halves the speed of a script without sacrificing sync by changing each up+down stroke into a single up or down stroke.</p>

<InputNumber id="speed_threshold" @bind-Value="speedThreshold" class="form-control" title="Actions above this speed threshold are eligible for halving" disabled="@isProcessing" />
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Reset_After_Pause" id="Reset_After_Pause" title="Reset device position after pauses" disabled="@isProcessing" />
    <label class="form-check-label" for="checkboxExample">Reset After Pause</label>
</div>
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Remove_Short_Pauses" id="Remove_Short_Pauses" title="Combine very short pauses with adjacent actions" disabled="@isProcessing" />
    <label class="form-check-label" for="checkboxExample">Remove Short Pauses</label>
</div>
<InputNumber id="short_pause_duration" @bind-Value="short_pause_duration" class="form-control" title="Duration threshold for short pauses (milliseconds)" disabled="@isProcessing" />
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Match_First_Downstroke" id="Match_First_Downstroke" title="Ensure first movement is downward" disabled="@isProcessing" />
    <label class="form-check-label" for="checkboxExample">Match First Downstroke</label>
</div>
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Match_Group_End_Position" id="Match_Group_End_Position" title="Ensure final position matches original script end" disabled="@isProcessing" />
    <label class="form-check-label" for="checkboxExample">Match Group End Position</label>
</div>

@if (isProcessing)
{
    <button class="btn btn-primary mb-2 button1 me-2" disabled>
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Applying FunHalver...
    </button>
}
else
{
    <button class="btn btn-primary mb-2 button1 me-2" @onclick="Apply_funhalver_async">Apply FunHalver</button>
}

@if (isResetting)
{
    <button class="btn btn-primary mb-2 button1" disabled>
        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
        Resetting...
    </button>
}
else
{
    <button class="btn btn-primary mb-2 button1" @onclick="ResetScriptAsync">Reset FunHalver</button>
}

@code {
    [Parameter]
    public bool GrandChildData { get; set; }

    [Parameter]
    public EventCallback<bool> GrandChildDataChanged { get; set; }

    private bool isProcessing = false;
    private bool isResetting = false;

    public bool Reset_After_Pause { get; set; }
    public bool Remove_Short_Pauses { get; set; } = true;
    public bool Match_First_Downstroke { get; set; }
    public bool Match_Group_End_Position { get; set; } = true;
    public float speedThreshold { get; set; } = 0f;
    public int short_pause_duration { get; set; } = 2000;

    Funscript? funscript;

    private async Task Apply_funhalver_async()
    {
        isProcessing = true;
        StateHasChanged();

        try
        {
            await Task.Run(() =>
            {
                funscript = funscript_manager.modified_funscript;
                FunHalver_options_2 options = new FunHalver_options_2
                {
                    ResetAfterPause = Reset_After_Pause,
                    RemoveShortPauses = Remove_Short_Pauses,
                    MatchFirstDownstroke = Match_First_Downstroke,
                    MatchGroupEndPosition = Match_Group_End_Position,
                    ShortPauseDuration = short_pause_duration,
                    SpeedThreshold = speedThreshold,
                };
                if (funscript != null)
                {
                    funscript = funscript_converter_funhalver_3.GetHalfSpeedScript(funscript, options, Logger);
                    funscript_manager.modified_funscript = funscript;
                    funscript_manager.User_Applied_modifier = true;
                }
                else
                {
                    Logger.LogError("funscript is null");
                }
            });

            GrandChildData = true;
            await GrandChildDataChanged.InvokeAsync(GrandChildData);
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error applying FunHalver: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ResetScriptAsync()
    {
        isResetting = true;
        StateHasChanged();

        try
        {
            await Task.Run(() =>
            {
                funscript_manager.modified_funscript = funscript_manager.starting_funscript;
                funscript_manager.Reset_trigger_canvas_rerender = !funscript_manager.Reset_trigger_canvas_rerender;
            });
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error resetting script: {ex.Message}");
        }
        finally
        {
            isResetting = false;
            StateHasChanged();
        }
    }
}
