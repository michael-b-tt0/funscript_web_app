@inject ILogger<FunQuarter> Logger
<h3>FunQuarter</h3>

<p>Quarters the speed of a script without sacrificing sync by changing each up+down stroke into a single up or down stroke.</p>

<InputNumber id="speed_threshold" @bind-Value="speedThreshold" class="form-control" />
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Reset_After_Pause" id="Reset_After_Pause" />
    <label class="form-check-label" for="checkboxExample">Reset After Pause</label>
</div>
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Remove_Short_Pauses" id="Remove_Short_Pauses" />
    <label class="form-check-label" for="checkboxExample">Remove Short Pauses</label>
</div>
<InputNumber id="short_pause_duration" @bind-Value="short_pause_duration" class="form-control" />
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Match_First_Downstroke" id="Match_First_Downstroke" />
    <label class="form-check-label" for="checkboxExample">Match First Downstroke</label>
</div>
<div class="form-check">
    <input type="checkbox" class="form-check-input" @bind="@Match_Group_End_Position" id="Match_Group_End_Position" />
    <label class="form-check-label" for="checkboxExample">Match Group End Position</label>
</div>
<button class="btn btn-primary mb-2 button1" @onclick="Apply_funquarter">Apply FunQuarter</button>
<button class="btn btn-primary mb-2 button1" @onclick="reset_script">Reset FunQuarter</button>

@code {
    [Parameter]
    public bool GrandChildData { get; set; }

    [Parameter]
    public EventCallback<bool> GrandChildDataChanged { get; set; }



    public bool Reset_After_Pause { get; set; }

    public bool Remove_Short_Pauses { get; set; } = true;

    public bool Match_First_Downstroke { get; set; }

    public bool Match_Group_End_Position { get; set; } = true;

    public float speedThreshold { get; set; } = 15f;

    public int short_pause_duration { get; set; } = 2000;

    Funscript? funscript;

    private void Apply_funquarter()
    {
        funscript = funscript_manager.modified_funscript;
        FunQuarter_options options = new FunQuarter_options
            {
                ResetAfterPause = Reset_After_Pause,
                RemoveShortPauses = Remove_Short_Pauses,
                MatchFirstDownstroke = Match_First_Downstroke,
                MatchGroupEndPosition = Match_Group_End_Position,
                ShortPauseDuration = short_pause_duration,
                    SpeedThreshold = speedThreshold,
            };
        if(funscript != null){
            funscript = funscript_converter_funquarter.GetQuarterSpeedScript(funscript, options, Logger);
            funscript_manager.modified_funscript = funscript;
            funscript_manager.User_Applied_modifier = true;
            GrandChildData = true;
            GrandChildDataChanged.InvokeAsync(GrandChildData);
        }
        else
        {
 Logger.LogError("funscript is null");
        }
    }

    private void reset_script()
    {

        funscript_manager.modified_funscript = funscript_manager.starting_funscript;
        funscript_manager.Reset_trigger_canvas_rerender = !funscript_manager.Reset_trigger_canvas_rerender;

    }


}
